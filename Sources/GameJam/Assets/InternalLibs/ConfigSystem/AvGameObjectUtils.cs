//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;
using System.Collections;
using System.Collections.Generic;

public static class AvGameObjectUtils
{
	public static void ClearAllChild(GameObject parent)
	{
		var children = new List<GameObject>();
		
		foreach (Transform child in parent.transform) children.Add(child.gameObject);

		parent.transform.DetachChildren();

		if (Application.isEditor ) 
		{

			children.ForEach(child => GameObject.DestroyImmediate(child));
		}
		else
		{
			children.ForEach(child => GameObject.Destroy(child));
		}
	}

	public static void SetActiveAllChild(GameObject parent, bool active)
	{
//		Debug.LogWarning("SetActiveAllChild " + parent.name + ":" + active);
		foreach (Transform child in parent.transform)
		{
		//	Debug.LogWarning("child " + child.name + ":" + active);
			child.gameObject.SetActive(active);
		}
	}

	public static GameObject AddChild(GameObject parent, string name = "NewGO")
	{
		GameObject c = new GameObject();
		c.name = name;
		c.transform.parent = parent.transform;
		c.transform.localPosition = Vector3.zero;
		c.transform.localScale = Vector3.one;
		c.transform.localEulerAngles = Vector3.zero;

		return c;
	}

	public static Component FindComponentInParent(Transform child, Type type)
	{
		Transform p = child.parent;
		if(p == null)
		{
			return null;
		}

		if(p.GetComponent(type) != null)
			return p.GetComponent(type);

		return FindComponentInParent(p, type);
	}

	public static Texture LoadTexture(string path)
	{
		//Debug.Log("LoadTexture " + path);
		try
		{
			return Resources.Load(path, typeof(Texture)) as Texture;
		}
		catch(Exception e)
		{
			Debug.Log("Cannot load texture " + path + "with error " + e.Message);
		}
		return null;
	}

	public static TextAsset LoadTextAsset(string path)
	{
		//Debug.Log("LoadTextAsset " + path);
		try
		{
			return Resources.Load(path, typeof(TextAsset)) as TextAsset;
		}
		catch(Exception e)
		{
			Debug.Log("Cannot load text asset " + path + "with error " + e.Message);
		}
		return null;
	}

	public static GameObject LoadPrefab(string path)
	{
		//Debug.Log("LoadPrefabs " + path);
		try
		{
			return Resources.Load(path, typeof(GameObject)) as GameObject;
		}
		catch(Exception e)
		{
			Debug.Log("Cannot load prefab " + path + "with error " + e.Message);
		}
		return null;
	}

	public static GameObject LoadGameObject(string path)
	{
		return LoadGameObject(null, path);
	}

	public static GameObject LoadGameObject(Transform parent, string path)
    {
		GameObject prefab = LoadPrefab(path);
		if(prefab == null) return null;

        GameObject go =(GameObject) GameObject.Instantiate(prefab, Vector3.zero, Quaternion.identity);
        go.transform.parent = parent;
        go.transform.localPosition = Vector3.zero;
        go.transform.localRotation = Quaternion.identity;
        go.transform.localScale = Vector3.one;

        return go;

    }

#if UNITY_EDITOR
    public static GameObject LoadPrefabInAsset(Transform parent, string name)
    {
        GameObject prefab = UnityEditor.AssetDatabase.LoadAssetAtPath(name, typeof(GameObject)) as GameObject;
        GameObject go =(GameObject) GameObject.Instantiate(prefab, Vector3.zero, Quaternion.identity);
        go.transform.parent = parent;
        go.transform.localPosition = Vector3.zero;
        go.transform.localRotation = Quaternion.identity;
        go.transform.localScale = Vector3.one;
        return go;
    }
#endif

   
	
}


